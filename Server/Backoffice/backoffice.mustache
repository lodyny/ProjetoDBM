var express = require('express');
var router = express.Router();
var mustache = require("mustache");
var fs = require("fs");

{{#models}}
var {{{name}}} = require('../Models/{{{name}}}.js');
{{/models}}

{{#models}}
router.get("/{{{name}}}", function(req, res) {
    {{{name}}}.all(function (data) {
        res.render('list', {
            title: '{{{name}}}',
            menu: getMenu(),
            columns: Object.keys(new {{{name}}}()),
            rows: data.map(obj => {
                return {
                    properties: Object.keys(obj).map(key => {
                        return {
                            name: key,
                            value: obj[key]
                        }
                    }),
                    actions: [{
                        label: '',
                        link: './{{{name}}}/Details/' + obj.id,
                        image: {
                            src: '../images/read.png'
                        },
                        tooltip: 'Details'
                    }, {
                        label: '',
                        link: './{{{name}}}/Edit/' + obj.id,
                        image: {
                            src: '../images/edit.png'
                        },
                        tooltip: 'Edit'
                    }, {
                        label: '',
                        link: '#',
                        image: {
                            src: '../images/delete.png'
                        },
                        tooltip: 'Delete',
                        events: [{
                            name: "onclick",
                            function: "deleteRecord",
                            args: obj.id
                        }]

                    }]
                }
            })
        })
    });
});

router.get("/{{{name}}}/Details/:id", function(req, res) {
    {{{name}}}.get(req.params.id, function (row) {
        var model = JSON.parse(fs.readFileSync("./Models/Schemas/" + "{{{name}}}".toLowerCase()
                + "-schema.json"));
        res.render('details', {
            title: '{{{name}}}',
            menu: getMenu(),
            properties: function () {
                var allProps = Object.getOwnPropertyNames(row);
                var validProps = [];
                allProps.forEach(function (prop) {
                    if (model.properties.hasOwnProperty(prop)) {
                        var validProp = {
                            name: prop,
                            value: row[prop]
                        };

                        var presentationMode = model.properties[prop].presentationMode;

                        if(presentationMode == 'image'){
                            validProp.image = true;
                        }
                        else if(presentationMode == 'video'){
                            validProp.video = true;
                        }
                        else {
                            validProp.text = true;
                        }


                        validProps.push(validProp);
                    }
                });
                return validProps;
            },
            references: function () {
                var allRefs = [];
                if (model.references){
                    model.references.forEach(function (ref) {
                        allRefs.push({
                            label: ref.label,
                            model: ref.model,
                            values: ref.relation == "M-M" ? req.params.id + '/' + ref.model : row[(ref.model + "_id").toLowerCase()]
                        });
                    });
                }
                return allRefs;
            },
            get hasReferences() {
                return this.references().length > 0;
            }
        })
    });
});



router.get("/{{{name}}}/Edit/:id", function(req, res) {
    var model = JSON.parse(fs.readFileSync("./Models/Schemas/" + "{{{name}}}".toLowerCase()
    {{{name}}}.get(req.params.id, function(data) {
        if (data){
            var obj = new {{{name}}};
            res.render('form', {
                title: '{{{name}}}',
                model: '{{{name}}}',
                modelID: req.params.id,
                menu: getMenu(),
                isEditForm: true,
                properties: function (){
                    var allProps = Object.getOwnPropertyNames(new {{{name}}}());
                    var validProps = [];
                    allProps.forEach(function (prop) {
                        if (prop.includes('id'))
                            return;
                        var proprow = {
                            name: prop,
                            labelName: prop,
                            value: data[prop]
                        };
                        validProps.push(proprow);
                    });
                    return validProps;
                },
                references: function () {
                var allRefs = [];
                if (model.references){
                    model.references.forEach(function (ref) {
                        allRefs.push({
                            label: ref.label,
                            is_mm_relation: (ref.relation === 'M-M'),
                            model: ref.model,
                            value: data[ref.model.toLowerCase() + "_id"]
                        });
                    });
                }
                return allRefs;
            },
            get hasReferences() {
                return this.references().length > 0;
            }
            })
        }
    })
});

router.get("/{{{name}}}/Insert", function(req, res) {
            var model = JSON.parse(fs.readFileSync("./Models/Schemas/" + "{{{name}}}".toLowerCase()
                + "-schema.json"));
            res.render('form', {
                title: '{{{name}}}',
                model: '{{{name}}}',
                menu: getMenu(),
                isEditForm : false,
                properties: function (){
                    var allProps = Object.getOwnPropertyNames(new {{{name}}}());
                    var validProps = [];
                    allProps.forEach(function (prop) {
                        if (prop.includes('id'))
                            return;
                        var proprow = {
                            name: prop,
                            labelName: prop
                        };
                        validProps.push(proprow);
                    });
                    return validProps;
                },
                references: function () {
                var allRefs = [];
                if (model.references){
                    model.references.forEach(function (ref) {
                        allRefs.push({
                            label: ref.label,
                            is_mm_relation: (ref.relation === 'M-M'),
                            model: ref.model
                        });
                    });
                }
                return allRefs;
            },
            get hasReferences() {
                return this.references().length > 0;
            }
            })
});

{{/models}}

function getMenu (){
    var menu = fs.readFileSync("./Publish/Views/menu.mustache").toString();

    schemas = [];
    var config = JSON.parse(fs.readFileSync("./Server/config.json"));

    config.schemas.forEach(model => {
        schemas.push(model);
    });

    var menu_config = {
        schemas: schemas
    }

    return mustache.render(menu, menu_config);
}

module.exports = router;