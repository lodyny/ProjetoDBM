const dbpath = "./Publish/Database/{{{db_name}}}";
var database = require('../Database/sqlitedbm.js')(dbpath);

class {{classTitle}} {
    constructor ({{classProperties}}) {
        Object.defineProperty(this,'{{primaryKey.name}}',{ 
                enumerable:true,
                writable:true,        
            });
        {{{classConstructor}}}
    }
}
 
{{classTitle}}.all = function (callback) {
    database.where("SELECT * FROM {{{classTitle}}}", [], {{{classTitle}}}, callback);
}       

{{classTitle}}.get = function (id, callback) {
    database.get("SELECT * FROM {{{classTitle}}} WHERE {{{primaryKey.columnName}}} = ? ",[id] ,{{{classTitle}}}, callback);
}

{{classTitle}}.delete = function (id, callback) {
    database.get("DELETE FROM {{{classTitle}}} WHERE {{{primaryKey.columnName}}} = ? ",[id] ,{{{classTitle}}}, callback);
}

{{classTitle}}.prototype.save = function (callback) {
    if(this.{{primaryKey.name}}) {//UPDATE
        database.run("UPDATE {{{classTitle}}} SET {{{propertiesSetValues}}}{{#classReferences}}{{^isMM}},{{{model}}}_id = ?{{/isMM}}{{/classReferences}} WHERE {{{primaryKey.columnName}}} = ?", 
        [{{{propertiesJoinThis}}}
            {{#classReferences}}{{^isMM}},this.{{{model}}}_id{{/isMM}}{{/classReferences}}
            ,this.{{primaryKey.name}}
        ]       
        , callback);
    
    } else {//INSERT      
        database.run("INSERT INTO {{{classTitle}}}({{{propertiesJoin}}} {{#classReferences}}{{^isMM}},{{{model}}}_id{{/isMM}}{{/classReferences}}) VALUES({{{propertiesValuesParams}}}{{#classReferences}}{{^isMM}}, ?{{/isMM}}{{/classReferences}})" ,
         [{{{propertiesJoinThis}}}
            {{#classReferences}}
            {{^isMM}}
                ,this.{{{model}}}_id
            {{/isMM}}
            {{/classReferences}}   
            
         ], callback);     
    }
}

{{classTitle}}.many = function (model, id, callback){
    var tableName = "{{classTitle}}_" + model;
    
    database.where(`SELECT {{classTitle}}.* FROM {{classTitle}} INNER JOIN ${tableName} ON ${tableName}.{{classTitle}}_{{primaryKey.name}} = {{classTitle}}.{{classTitle}}_{{primaryKey.name}} WHERE ${tableName}.${model.toLowerCase()}_id = ?`, [id], {{classTitle}}, callback);
}

{{classTitle}}.top = function (property,order,limit,callback) {
    var dbprop = Object.keys({{classTitle}}.mappingDBtoObject).find(key => {{classTitle}}.mappingDBtoObject[key] == property);
    database.where(`SELECT * FROM {{classTitle}} ORDER BY ${dbprop} ${order} LIMIT ?`, [limit], {{classTitle}}, callback);
}

{{classTitle}}.topWith1M = function(model, order, limit,callback){
    var attributeModel = model.toLowerCase();
    database.where(`select a.*,b.* from {{classTitle}} a, ${model} b where a.${attributeModel}_id = b.${attributeModel}_id ORDER by a.${order} LIMIT ?`, [limit], {{{classTitle}}}, callback);
}

{{classTitle}}.topWithMMCount = function (model, order,limit,callback) {
    var nmTableName = database.getNMTableName("{{classTitle}}", model);
    database.where(`select a.*, count(b.{{classTitle}}_id) as count from {{classTitle}} a, ${nmTableName} b where a.{{classTitle}}_id = b.{{classTitle}}_id group by a.{{classTitle}}_id order by count ${order} LIMIT ?`, [limit], {{classTitle}}, callback);
}

{{classTitle}}.mappingDBtoObject = {
    {{{mappingDBtoObject}}}
    {{#classReferences}}
        , {{{model}}}_id : '{{{model}}}_id'
    {{/classReferences}}
}

module.exports = {{{classTitle}}};